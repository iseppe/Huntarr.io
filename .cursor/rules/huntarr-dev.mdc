---
description: Huntarr development rules and patterns
globs: ["**/*.py", "**/*.js", "**/*.html", "**/*.css", "**/*.md"]
alwaysApply: true
---
# Huntarr Development Rules for Cursor AI

## üö® CRITICAL MANDATORY RULES

### NEVER AUTO-COMMIT
- NEVER automatically commit changes without explicit user approval
- Always present fixes to user first and get explicit approval before committing
- Let user decide when to commit

### MANDATORY TESTING WORKFLOW
- ALWAYS rebuild and test changes using: `cd /Users/home/Huntarr/Huntarr.io && docker-compose down && COMPOSE_BAKE=true docker-compose up -d --build`
- ALWAYS check logs for errors: `docker logs huntarr`
- Test in both Docker and local environments

### CROSS-PLATFORM REQUIREMENTS
- NEVER use hard-coded absolute paths (e.g., `/config/file.json`)
- ALWAYS use `os.path.join()` for path construction
- ALWAYS use relative URLs in frontend (e.g., `./api/` not `/api/`)
- ALWAYS test: Docker, Windows, Mac, Linux, subpaths (`domain.com/huntarr/`)

## üóÑÔ∏è DATABASE-FIRST DEVELOPMENT

### ALWAYS Use DatabaseManager
- Use `DatabaseManager` class from `src/primary/utils/database.py` for ALL data operations
- NEVER use direct SQLite calls (`sqlite3.connect()`)
- NEVER use JSON file operations for persistent data
- DatabaseManager auto-detects environment (Docker vs local)

### Database Locations
- Docker: `/config/huntarr.db` (persistent volume)
- Local: `{project_root}/data/huntarr.db`
- Auto-detection handles path selection

### Code Pattern
```python
# ‚úÖ CORRECT
from src.primary.utils.database import DatabaseManager
db = DatabaseManager()
db.set_setting('app', 'key', 'value')

# ‚ùå NEVER DO THIS
import sqlite3
conn = sqlite3.connect('/config/huntarr.db')
```

## üåê FRONTEND DEVELOPMENT RULES

### URL Patterns
- ALWAYS use relative URLs: `./api/endpoint` not `/api/endpoint`
- ALWAYS use relative redirects: `window.location.href = './'` not `'/'`
- This ensures subpath deployment works (`domain.com/huntarr/`)

### Documentation Links
- ALWAYS use GitHub documentation domain: `https://plexguide.github.io/Huntarr.io/`
- ALWAYS include proper anchors that exist in documentation
- ALWAYS verify anchors exist before linking
- Pattern: `https://plexguide.github.io/Huntarr.io/apps/[app-name].html#[anchor]`

### JavaScript Patterns
- ALWAYS declare variables before use in form generation
- NEVER use double backslashes in regex patterns
- ALWAYS handle undefined variables gracefully

## üêõ COMMON ISSUE PREVENTION

### Log Regex Issues
- Use clean regex patterns without double backslashes
- Test regex patterns thoroughly
- File: `/frontend/static/js/new-main.js` - `connectEventSource()` method

### Settings Form Issues
- Include all field name variations for different apps
- Readarr: `hunt_missing_books`, `hunt_upgrade_books`
- Radarr: `hunt_missing_movies`, `hunt_upgrade_movies`
- Sonarr/Lidarr/Whisparr/Eros: `hunt_missing_items`, `hunt_upgrade_items`
- File: `/frontend/static/js/settings_forms.js`

### CSS Loading Order
- Add responsive CSS to external files, not inline in components
- Use debug borders to test CSS loading: `border: 2px solid lime !important;`
- Files: `/frontend/static/css/responsive-fix.css`, `/frontend/static/css/new-style.css`

### Hard-Coded Path Issues
- NEVER use hard-coded Docker paths that don't exist on bare metal
- Use environment detection pattern with DatabaseManager
- Test both Docker and local environments

### JavaScript Variable Undefined Errors
- Ensure all variables are declared before use in form generation
- File: `/frontend/static/js/settings_forms.js`

### Subpath Compatibility Issues
- Works at root domain but fails in subdirectories
- Use relative URLs everywhere: `./api/` not `/api/`

### Info Icon Documentation Link Issues
- Use proper GitHub documentation pattern with specific anchors
- Pattern: `https://plexguide.github.io/Huntarr.io/apps/[app-name].html#[anchor]`
- Always include `target="_blank" rel="noopener"` attributes

### GitHub API Rate Limiting Issues
- Use GitHub Actions + static manifest approach instead of direct API calls
- Fetch from static manifest.json updated by GitHub Actions

## üìÅ KEY FILE LOCATIONS

### Backend Core
- `/src/primary/utils/database.py` - DatabaseManager class (USE THIS)
- `/src/primary/routes/common.py` - API endpoints
- `/src/primary/auth.py` - Authentication logic
- `/src/primary/cycle_tracker.py` - Timer functionality

### Frontend Core
- `/frontend/static/js/new-main.js` - Main UI logic
- `/frontend/static/js/settings_forms.js` - Settings forms
- `/frontend/templates/components/` - UI components

### Database Files
- Docker: `/config/huntarr.db`
- Local: `./data/huntarr.db`

## üîß DEVELOPMENT WORKFLOW

### Before Making Changes
1. Check current directory: `/Users/home/Huntarr/Huntarr.io`
2. Activate venv for local development: `source venv/bin/activate`
3. Review these rules

### Making Changes
1. Edit source code (never modify inside container)
2. For local testing: `python main.py` (uses ./data/huntarr.db)
3. For Docker testing: `docker-compose down && COMPOSE_BAKE=true docker-compose up -d --build`
4. Check logs: `docker logs huntarr`
5. Test functionality in both environments

### Before Committing
1. Test in Docker environment
2. Test in local environment  
3. Test cross-platform compatibility
4. Test subpath scenarios
5. Check browser console for errors
6. Verify database persistence across container restarts
7. Get user approval before committing

## ‚ö†Ô∏è ANTI-PATTERNS TO AVOID

### Database Anti-Patterns
- ‚ùå Direct SQLite calls: `sqlite3.connect()`
- ‚ùå Hard-coded database paths: `/config/huntarr.db`
- ‚ùå JSON file operations for persistent data
- ‚ùå Not testing both Docker and local database operations

### Frontend Anti-Patterns
- ‚ùå Absolute URLs: `/api/endpoint`, `window.location.href = '/'`
- ‚ùå Wrong documentation domain links
- ‚ùå Missing anchor verification
- ‚ùå Double backslashes in regex
- ‚ùå Inline responsive CSS in components

### Development Anti-Patterns
- ‚ùå Modifying files inside containers
- ‚ùå Auto-committing without approval
- ‚ùå Testing only in Docker
- ‚ùå Not using virtual environment for local development
- ‚ùå Creating temporary files instead of fixing source
- ‚ùå Inconsistent behavior between missing/upgrade logic
- ‚ùå Reactive violation fixing (scan proactively instead)
- ‚ùå Documentation that promises non-existent features
- ‚ùå Frontend links without verifying documentation anchors exist
- ‚ùå Organic feature growth without reality checks
- ‚ùå Theoretical FAQ content (base on real user problems)

### State Management Anti-Patterns
- ‚ùå Using global state locks instead of per-instance locks
- ‚ùå Frontend calculating times with `Date.now()` instead of using database times
- ‚ùå Inconsistent instance naming between frontend and backend API calls
- ‚ùå Not testing state persistence across page reloads
- ‚ùå Mixing cached frontend times with database-locked times

### Frontend Anti-Patterns (Additional)
- ‚ùå Event listeners overriding backend-provided data
- ‚ùå Inconsistent styling between similar components across apps
- ‚ùå Hard-coded CSS values instead of consistent color schemes
- ‚ùå Not clearing browser cache when testing frontend fixes
- ‚ùå Assuming frontend calculations match backend logic

## üö® PROACTIVE VIOLATION SCANNING

### Before Every Commit, Check For:
1. Absolute URL violations: `grep -r "fetch('/api/" frontend/ --include="*.js"`
2. Documentation violations: `grep -r "href.*plexguide.github.io" frontend/ --include="*.js" | grep -v "plexguide.github.io/Huntarr.io"`
3. Database violations: `grep -r "sqlite3.connect\|import sqlite3" src/ --include="*.py" | grep -v "database.py"`
4. Hard-coded path violations: `grep -r "/config" src/ --include="*.py" | grep -v "_detect_environment\|_get.*path\|DatabaseManager"`
5. JSON file operations: `grep -r "\.json\|json.load\|json.dump" src/ --include="*.py" | grep -v "requests.*json\|response.json\|Content-Type.*json"`
6. Frontend time calculation violations: `grep -r "Date.now.*hours.*60.*1000" frontend/ --include="*.js"`
7. Global state lock usage: `grep -r "stateful_lock" src/ --include="*.py" | grep -v "stateful_instance_locks"`
8. Inconsistent app styling: `grep -r "background.*linear-gradient.*rgba(15, 23, 42" frontend/ --include="*.js"`

### Violation Scanning Commands
```bash
# Create violation_scan.sh for easy reuse
echo "=== HUNTARR VIOLATION SCAN ==="
echo "1. Absolute URL violations: $(grep -r "fetch('/api/" frontend/ --include="*.js" | wc -l)"
echo "2. Documentation violations: $(grep -r "href.*plexguide.github.io" frontend/ --include="*.js" | grep -v "plexguide.github.io/Huntarr.io" | wc -l)"
echo "3. Database violations: $(grep -r "sqlite3.connect\|import sqlite3" src/ --include="*.py" | grep -v "database.py" | wc -l)"
echo "4. Hard-coded path violations: $(grep -r "/config" src/ --include="*.py" | grep -v "_detect_environment\|_get.*path\|DatabaseManager" | wc -l)"
echo "5. JSON file violations: $(grep -r "\.json\|json.load\|json.dump" src/ --include="*.py" | grep -v "requests.*json\|response.json\|Content-Type.*json" | wc -l)"
echo "6. Frontend time calculation violations: $(grep -r "Date.now.*hours.*60.*1000" frontend/ --include="*.js" | wc -l)"
echo "7. Global state lock violations: $(grep -r "stateful_lock" src/ --include="*.py" | grep -v "stateful_instance_locks" | wc -l)"
echo "8. Inconsistent app styling violations: $(grep -r "background.*linear-gradient.*rgba(15, 23, 42" frontend/ --include="*.js" | wc -l)"
```

## üìä SPECIFIC BUG PATTERNS TO AVOID

### GitHub Issue #626 Pattern (2FA Verification)
- Check both `temp_2fa_secret` (setup) and `two_fa_secret` (enabled) in auth functions
- File: `/src/primary/auth.py`

### GitHub Issue #624 Pattern (Settings Persistence)
- Include all field name variations in form collection logic
- File: `/frontend/static/js/settings_forms.js`

### GitHub Issue #629 Pattern (Windows Database Access)
- Use DatabaseManager with proper Windows AppData support
- Never hard-code database paths

### Frontend Log Regex Issues
- Malformed regex with double backslashes
- Fix: Use clean regex patterns without double backslashes
- File: `/frontend/static/js/new-main.js` - `connectEventSource()` method

### DEBUG Log Filtering Race Condition
- DEBUG logs appear in wrong filters (Info, Warning, Error)
- Fix: Apply filter to new entries as they arrive in EventSource
- File: `/frontend/static/js/new-main.js` - `connectEventSource()` method

### Per-Instance State Management Issues
- Global state locks affect all instances instead of being per-instance
- Frontend time calculations override database-locked times causing inconsistent display
- Fix: Implement per-instance database locks with `stateful_instance_locks` table
- File: `/src/primary/stateful_manager.py`, `/src/primary/utils/database.py`

### Frontend Time Calculation Override Bug
- Event listeners in form generation calculate new times using `Date.now()` instead of using database times
- Pattern: `const resetTime = new Date(Date.now() + (hours * 60 * 60 * 1000));`
- Symptom: Times change on page reload despite being locked in database
- Fix: Remove time calculation from event listeners, let backend provide locked times
- File: `/frontend/static/js/settings_forms.js` - state hours input event listeners

### Inconsistent App Styling Issues  
- Apps may have different styling for similar components (e.g., state status sections)
- Check for consistent CSS styling across all app form generation functions
- Pattern: Sonarr using dark gradient while Radarr using green gradient for same component
- Fix: Standardize styling across all apps for similar UI elements

## üéØ DEBUGGING APPROACH

### Systematic Issue Discovery
1. Don't guess - scan systematically first
2. Use grep to find exact error patterns
3. Check browser console for JavaScript errors
4. Verify database operations in both environments
5. Test cross-platform compatibility

### Database Debugging
```bash
# Docker environment
docker exec huntarr ls -la /config/huntarr.db
docker exec huntarr sqlite3 /config/huntarr.db ".tables"

# Local environment  
ls -la ./data/huntarr.db
sqlite3 ./data/huntarr.db ".tables"

# Test DatabaseManager operations
python3 -c "from src.primary.utils.database import DatabaseManager; db = DatabaseManager(); print('Database path:', db.db_path)"
```

### Subpath Deployment Debugging
- Check browser network tab for 404s on absolute URLs
- Search for absolute patterns: `grep -r "fetch('/api" frontend/`
- Check redirects: `grep -r "window.location.href.*= '/" frontend/`
- Verify all URLs are relative: `./api/` not `/api/`

### Frontend-Documentation Link Debugging
- Extract frontend anchor references: `grep -r "href.*#" frontend/static/js/ | grep -o "#[^\"]*"`
- Extract doc anchors: `grep -r 'id="[^"]*"' docs/ | grep -o 'id="[^"]*"'`
- Compare lists to find mismatches

### Log Issues Debugging
1. Check logs in database: `docker exec huntarr python3 -c "import sys; sys.path.insert(0, '/app/src'); from primary.utils.logs_database import get_logs_database; db = get_logs_database(); logs = db.get_logs(limit=10); [print(f'{log["timestamp"]} - {log["app_type"]} - {log["level"]} - {log["message"]}') for log in logs]"`
2. Test backend streaming: `curl -N -s "http://localhost:9705/logs?app=[app]"`
3. Check browser console for JavaScript errors
4. Verify regex patterns in `new-main.js`

### Settings Issues Debugging
1. Check form generation functions
2. Verify `getFormSettings()` method
3. Test save/load cycle
4. Check API endpoints
5. Verify info icon links point to existing documentation anchors

### CSS Issues Debugging
1. Check browser console for errors
2. Add debug borders: `border: 2px solid lime !important;`
3. Verify CSS loading order (external files vs inline)
4. Test specificity with `!important` declarations
5. Search for conflicting rules: `grep -r "className" frontend/static/css/`

### Documentation Issues Debugging
1. Test all links manually or with link checker
2. Verify features mentioned actually exist in codebase
3. Check frontend alignment with documentation
4. Audit FAQ against real support requests

### State Management Issues Debugging
1. Check database locks: `docker exec huntarr sqlite3 /config/huntarr.db "SELECT * FROM stateful_instance_locks;"`
2. Verify per-instance vs global locks in database schema
3. Test frontend instance name consistency across API calls
4. Monitor browser console for time calculation overrides
5. Check event listener patterns: `grep -r "Date.now.*hours.*60.*1000" frontend/`

### Frontend Time Display Issues Debugging
1. Compare database time vs displayed time on page reload
2. Check event listeners for time calculations in form generation
3. Verify API responses contain locked times from database
4. Test with browser cache cleared to rule out caching issues
5. Monitor network tab for API calls during page interactions

### App Styling Consistency Debugging
1. Search for styling patterns: `grep -r "background.*linear-gradient" frontend/static/js/`
2. Compare CSS classes between similar components across apps
3. Check for hard-coded styles vs CSS classes
4. Verify color consistency: `grep -r "rgba.*185.*129" frontend/`
5. Test visual consistency across all app settings forms

## üìù MEMORY CREATION GUIDELINES

Create memories for:
- ‚úÖ Bug fixes with root cause analysis
- ‚úÖ New features and their implementation patterns
- ‚úÖ Cross-platform compatibility fixes
- ‚úÖ Performance improvements
- ‚úÖ Database migration insights

## üöÄ DEPLOYMENT RULES

### Branch Management
- Work on feature branches
- Deploy to `dev` branch first
- Merge `dev` to `main` after testing
- Always pull latest changes before merging

### Testing Requirements
- Test in Docker environment
- Test in local development environment
- Test cross-platform paths
- Test subpath deployment scenarios
- Verify database persistence

## üìã FOLLOW .github/listen.md GUIDELINES

This file automatically enforces the patterns from `.github/listen.md`. The user should not need to remind you about:
- Using DatabaseManager instead of direct SQLite
- Using relative URLs instead of absolute URLs
- Testing in both Docker and local environments
- Following cross-platform compatibility requirements
- Getting approval before committing changes
- Using proper documentation links with verified anchors
- Proactive violation scanning before commits
- Systematic debugging approaches
- Database-first development patterns
- Cross-platform path handling

---

**REMEMBER: These rules are automatically applied. Follow them without being reminded.**
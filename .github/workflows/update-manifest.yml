name: Update Manifest

on:
  release:
    types: [published]
  schedule:
    # Run every 24 hours at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual triggers

jobs:
  update-manifest:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get latest release
        id: latest_release
        run: |
          LATEST=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r '.tag_name // "v0.0.0"')
          echo "version=$LATEST" >> $GITHUB_OUTPUT
          echo "Latest version: $LATEST"

      - name: Fetch sponsors data
        id: sponsors
        run: |
          # Fetch sponsors using GitHub's GraphQL API with tier information
          echo "Fetching sponsors data from GitHub GraphQL API..."
          
          GRAPHQL_RESPONSE=$(curl -s -X POST \
            -H "Authorization: bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "query": "query { organization(login: \"plexguide\") { sponsorshipsAsMaintainer(first: 50, orderBy: {field: CREATED_AT, direction: DESC}) { totalCount edges { node { tier { monthlyPriceInDollars name } createdAt sponsorEntity { ... on User { login avatarUrl name url } ... on Organization { login avatarUrl name url } } } } } } }"
            }' \
            https://api.github.com/graphql)
          
          echo "GraphQL Response: $GRAPHQL_RESPONSE"
          
          # Check for errors in the response
          if echo "$GRAPHQL_RESPONSE" | jq -e '.errors' > /dev/null; then
            echo "GraphQL API returned errors:"
            echo "$GRAPHQL_RESPONSE" | jq '.errors'
            echo "Using fallback sponsors data..."
            SPONSORS_JSON='[]'
          else
            SPONSORS_JSON=$(echo "$GRAPHQL_RESPONSE" | jq -c '.data.organization.sponsorshipsAsMaintainer.edges // []')
          fi
          
          # If GraphQL failed, use hardcoded fallback sponsors based on known GitHub sponsors
          if [ "$SPONSORS_JSON" = "[]" ]; then
            echo "GraphQL API failed, using hardcoded fallback sponsors..."
            PROCESSED_SPONSORS='[
              {
                "login": "elfhosted",
                "name": "ElfHosted",
                "avatarUrl": "https://avatars.githubusercontent.com/u/109462257?v=4",
                "url": "https://github.com/elfhosted",
                "tier": "Featured Sponsor",
                "monthlyAmount": 25,
                "createdAt": "2024-01-01T00:00:00Z",
                "category": "featured"
              },
              {
                "login": "simplytoast1",
                "name": "simplytoast1",
                "avatarUrl": "https://avatars.githubusercontent.com/u/simplytoast1?v=4",
                "url": "https://github.com/simplytoast1",
                "tier": "Tier II - Sponsor",
                "monthlyAmount": 20,
                "createdAt": "2024-01-01T00:00:00Z",
                "category": "active"
              },
              {
                "login": "TheOnlyLite",
                "name": "TheOnlyLite",
                "avatarUrl": "https://avatars.githubusercontent.com/u/TheOnlyLite?v=4",
                "url": "https://github.com/TheOnlyLite",
                "tier": "Tier II - Sponsor",
                "monthlyAmount": 20,
                "createdAt": "2024-01-01T00:00:00Z",
                "category": "active"
              },
              {
                "login": "tcconnally",
                "name": "tcconnally",
                "avatarUrl": "https://avatars.githubusercontent.com/u/tcconnally?v=4",
                "url": "https://github.com/tcconnally",
                "tier": "Tier I - Sponsor",
                "monthlyAmount": 10,
                "createdAt": "2024-01-01T00:00:00Z",
                "category": "active"
              }
            ]'
          else
            # Process sponsors with tier information and categorization
            PROCESSED_SPONSORS=$(echo "$SPONSORS_JSON" | jq -c '[.[] | .node | select(.sponsorEntity != null) | {
              login: .sponsorEntity.login,
              name: (.sponsorEntity.name // .sponsorEntity.login),
              avatarUrl: .sponsorEntity.avatarUrl,
              url: .sponsorEntity.url,
              tier: (.tier.name // "Supporter"),
              monthlyAmount: (.tier.monthlyPriceInDollars // 0),
              createdAt: .createdAt,
              category: (if (.tier.monthlyPriceInDollars // 0) >= 25 then "featured" 
                        elif (.tier.monthlyPriceInDollars // 0) >= 10 then "active"
                        else "past" end)
            }]')
          fi
          
          echo "sponsors=$PROCESSED_SPONSORS" >> $GITHUB_OUTPUT
          echo "Found $(echo "$PROCESSED_SPONSORS" | jq length) sponsors"

      - name: Create manifest.json
        run: |
          cat > manifest.json << EOF
          {
            "version": "${{ steps.latest_release.outputs.version }}",
            "updated": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "sponsors": ${{ steps.sponsors.outputs.sponsors }},
            "project": {
              "name": "Huntarr",
              "description": "Automated media management for the masses",
              "repository": "${{ github.repository }}",
              "website": "https://plexguide.github.io/Huntarr.io"
            }
          }
          EOF

      - name: Update sponsors API endpoint
        run: |
          # Trigger the sponsors API to update the database with new data
          # This ensures the database stays in sync with the manifest
          echo "Sponsors data will be automatically updated when the API is called"
          echo "The API will detect the new manifest.json and populate the database"

      - name: Validate JSON
        run: |
          if ! jq . manifest.json > /dev/null; then
            echo "ERROR: Generated manifest.json is not valid JSON"
            cat manifest.json
            exit 1
          fi
          echo "✅ manifest.json is valid"
          echo "Sponsor count: $(jq '.sponsors | length' manifest.json)"
          echo "Version: $(jq -r '.version' manifest.json)"

      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          if ! git diff --exit-code manifest.json; then
            git add manifest.json
            git commit -m "Update manifest with latest sponsors and version"
            git push
            echo "✅ Manifest updated and pushed"
          else
            echo "ℹ️ No changes to manifest.json"
          fi 